var Readable = require("stream").Readable,
    _ = require("underscore"),
    util = require("util"),
    EventEmitter = require("events").EventEmitter;

/// Реализация поведения IncommingMessage модуля 'http'
var IncomingMessageMock = function(status,data){
    this.__offset = 0;
    this.status = status;
    this.__data = data;
    Readable.apply(this,arguments);
};
util.inherits(IncomingMessageMock,Readable);
_.extend(IncomingMessageMock.prototype,{
    _read: function(size){
        var ret = Buffer([].slice.apply(Buffer(this.__data),[this.__offset,this.__offset+size]));
        if (ret.length == 0) {
            return this.push(null);
        }
        this.__offset += size;
        this.push(ret);
    }
});

var HttpMock = function(){

    EventEmitter.call(this);
};
util.inherits(HttpMock,EventEmitter);
_.extend(HttpMock.prototype,{
    _setup: function(httpMockStatus,httpMockRet){
        this._httpMockStatus = httpMockStatus;
        this._httpMockRet = httpMockRet;
    },
    get: function(url,callback){
        callback(new IncomingMessageMock(this._httpMockStatus,this._httpMockRet));
        return this;
    }
});

var mock = new HttpMock();

module.exports = mock;